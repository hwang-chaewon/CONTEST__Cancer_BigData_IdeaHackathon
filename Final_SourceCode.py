# -*- coding: utf-8 -*-
"""최종 source code.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FlcC8Hmmmly9ts3teSBrmkKbJNDNTnTA

# Data & Module import
"""

import pandas as pd
import numpy as np
import sklearn
import os

import warnings
warnings.filterwarnings(action='ignore')

# 데이터 불러오기
os.chdir("/content/drive/MyDrive/암빅데이터경진대회")

train = pd.read_csv("./Train/train.csv")
valid = pd.read_csv("./Validation/valid.csv")

# shape 확인
print("Train shape :",train.shape)
print("Valid shape :",valid.shape)

"""## 조기폐경 label 추가 (SVC)
Train, Validation 데이터 마지막에 조기폐경 여부를 binary로 표시한 열 추가 => 조기폐경일 시 1, 아닐 시 0

40세 미만에 폐경일 시를 기준으로 함

regression의 경우에는 밑의 과정 필요 x
"""

train["Early Menopause"] = 0

# 40세 미만 폐경 -> label 1로

for i in range(len(train)):
  if (train.iloc[i,9]<40):
    train.iloc[i,33] = 1

# 원래 폐경 열은 drop

train = train.drop("Age of Menopause",axis=1)
train

# validation data

valid["Early Menopause"] = 0

for i in range(len(valid)):
  if (valid.iloc[i,9]<40):
    valid.iloc[i,33] = 1

valid = valid.drop("Age of Menopause",axis=1)
valid

"""# X,Y 분리

## Classification
"""

x_train = train.drop("Early Menopause",axis=1)
y_train = train.iloc[:,32:33]

x_valid = valid.drop("Early Menopause",axis=1)
y_valid = valid.iloc[:,32:33]

y_valid

"""## Regression"""

x_train = train.drop("Age of Menopause",axis=1)
y_train = train.iloc[:,9:10]

x_valid = valid.drop("Age of Menopause",axis=1)
y_valid = valid.iloc[:,9:10]

y_valid

"""## 4 Groups"""

x_병리 = x_train[['AGE','inductal carcinoma','infiltrating duct carcinoma','adenocarcinoma','lobular carcinoma','Metaplastic carcinoma','병기(t)','병기(n)','병기(m)','Height','Weight','BRCA1 PVs','BRCA1 VUS','BRCA2 PVs','BRCA2 VUS','ER','PR','AR']]
x_생활 = x_train[['Type of Drink','Smoke','COCP','HRT']]
x_사회 = x_train[['Marriage','Age at first birth','Number of births']]
x_치료 = x_train[['BCS','Mestectomy','pan hysterosalpingo oophorectomy','Hormone therapy','Radiation Therapy']]

x_병리_val = x_valid[['AGE','inductal carcinoma','infiltrating duct carcinoma','adenocarcinoma','lobular carcinoma','Metaplastic carcinoma','병기(t)','병기(n)','병기(m)','Height','Weight','BRCA1 PVs','BRCA1 VUS','BRCA2 PVs','BRCA2 VUS','ER','PR','AR']]
x_생활_val = x_valid[['Type of Drink','Smoke','COCP','HRT']]
x_사회_val = x_valid[['Marriage','Age at first birth','Number of births']]
x_치료_val = x_valid[['BCS','Mestectomy','pan hysterosalpingo oophorectomy','Hormone therapy','Radiation Therapy']]

# to csv
x_병리.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_병리.csv",index=None)
x_생활.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_생활.csv",index=None)
x_사회.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_사회.csv",index=None)
x_치료.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_치료.csv",index=None)

x_병리_val.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_병리_val.csv",index=None)
x_생활_val.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_생활_val.csv",index=None)
x_사회_val.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_사회_val.csv",index=None)
x_치료_val.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Train/x_치료_val.csv",index=None)

# feature importance 확인용
# 변수를 하나씩 제거했을 때의 에러 분석을 통해 어떤 변수가 가장 영향을 많이 미쳤는지 파악

x_f = x_병리.drop('Height',axis=1)
v_f = x_병리_val.drop('Height',axis=1)

"""# SVM model

## SVC
"""

from sklearn.model_selection import GridSearchCV, cross_validate
from sklearn.svm import SVC

svc = SVC(verbose=True, random_state = 77)

svc

"""## SVR"""

from sklearn.svm import SVR

svr = SVR(verbose=True)

svr

"""## GridSearchCV (사용X)
가장 적절한 parameter 값 찾기
"""

MAE = 'neg_mean_absolute_error'

params = {'kernel':["linear", "poly", "rbf", "sigmoid"]}

params = {'C':[1.0,2.0,3.0]}

grid_search = GridSearchCV(svc, params, scoring=MAE, cv=5, verbose=3, return_train_score=True)

grid_search.fit(x_train,y_train)

print("최적 파라미터: ",grid_search.best_params_)
print("best score : ",-1*(grid_search.best_score_))

"""# Train & Predict

## SVC
"""

svc.fit(x_병리,y_train)

pred = svc.predict(x_병리_val)

pred

"""## SVR"""

svr.fit(x_f, y_train)

pred = svr.predict(v_f)

pred

"""## SVC 성능"""

# 알고리즘이 정답을 맞게 예측한 비율
 
pred_df = pd.DataFrame(pred)
pred_df.columns = ["Pred"]

fin_df = pd.concat([y_valid,pred_df],axis=1)
count = 0

for i in range(len(fin_df)):
  if fin_df.iloc[i,0] == pred_df.iloc[i,0]:
    count += 1

print("Accuracy :",((count/len(fin_df))*100),"%")

"""## SVR 성능"""

# 평균 에러

pred_df = pd.DataFrame(pred)
pred_df.columns=["Age of Menopause"]

error = pd.DataFrame(pred_df - y_valid)

error_avg = error["Age of Menopause"].mean()
print("Average error: ", error_avg)

fin_df = pd.concat([y_valid,pred_df,error],axis=1)
fin_df.columns=["truth","pred","error"]

fin_df

"""# 결과 Export"""

fin_df.to_csv("/content/drive/MyDrive/암빅데이터경진대회/Results/SVR_치료.csv",index=False)
